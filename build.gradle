buildscript {
    ext {
        kotlinVersion = '1.3.20'
        springBootVersion = '2.1.1.RELEASE'
    }
    repositories {
        jcenter()
        mavenCentral()
        gradlePluginPortal()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-noarg:${kotlinVersion}")
        classpath("com.bmuschko:gradle-docker-plugin:4.1.0")
    }
}

plugins {
//    id "io.gitlab.arturbosch.detekt" version "1.0.0-RC12"
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
}

subprojects {
    repositories {
        maven {
            url "http://maven.aliyun.com/nexus/content/groups/public/"
        }
        mavenCentral()
    }
    group = 'bingege'
    version = '0.0.1'
    kotlinVersion = '1.3.20'

    apply plugin: 'kotlin'
    apply plugin: 'kotlin-kapt'
    apply plugin: "kotlin-jpa"
    apply plugin: 'kotlin-spring'
    apply plugin: 'idea'
    apply plugin: 'io.spring.dependency-management'
//    apply plugin: 'com.bmuschko.docker-remote-api'
//    apply plugin: 'io.gitlab.arturbosch.detekt'

//    detekt {
//        input = files("$projectDir/src/main/kotlin")
//        config = files("$rootDir/detekt.yml")
//        filters = '.*/test/.*,.*/resources/.*,.*/tmp/.*,.*/build/.*,.*/debug/.*'
//        reports {
//            xml.enabled = true
//            html.enabled = true
//        }
//        parallel = true
//    }

    compileKotlin {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8

        kotlinOptions {
            freeCompilerArgs = ["-Xjsr305=strict"]
            jvmTarget = "1.8"
        }
    }

    compileTestKotlin {
        kotlinOptions {
            freeCompilerArgs = ["-Xjsr305=strict"]
            jvmTarget = "1.8"
        }
    }

    test {
        useJUnitPlatform()
//        jvmArgs '--enable-preview'
//        testLogging.showStandardStreams = true
//        outputs.upToDateWhen { false }
//        systemProperty 'spring.profiles.active', 'test,local-test'
    }

    dependencies {
        implementation 'com.querydsl:querydsl-jpa:4.2.1'
        kapt "com.querydsl:querydsl-apt:4.2.1:jpa"

        implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion")
        implementation("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion")
        implementation("org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion")

        // 代码校验
//        detektPlugins("io.gitlab.arturbosch.detekt:detekt-formatting:1.0.0-RC12")


        // swagger文档
        implementation("io.springfox:springfox-swagger2:2.9.2") {
            exclude module: 'swagger-annotations'
            exclude module: 'swagger-models'
        }
        implementation('io.springfox:springfox-swagger-ui:2.9.2')
        implementation("io.swagger:swagger-annotations:1.5.21")
        implementation("io.swagger:swagger-models:1.5.21")

        // 热启动
        implementation("org.springframework.boot:spring-boot-devtools")

        // 测试
        testImplementation('org.springframework.boot:spring-boot-starter-test') {
            exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        }
        testCompile "org.junit.jupiter:junit-jupiter-api:5.2.0"
//        testCompile "org.junit.jupiter:junit-jupiter-params:5.2.0"
        testRuntime "org.junit.jupiter:junit-jupiter-engine:5.2.0"
//        testImplementation('org.junit.jupiter:junit-jupiter-api')
//        testImplementation('org.junit.jupiter:junit-jupiter-engine')
        testImplementation('com.google.code.gson:gson')
        testImplementation('org.springframework.boot:spring-boot-starter-webflux')
        testImplementation("com.ninja-squad:springmockk:1.1.2")
        testImplementation("org.springframework.security:spring-security-test:5.1.5.RELEASE")
    }

    dependencyManagement {
        imports {
            mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}") {
                bomProperty("kotlin.version", "1.3.20")
            }
        }
    }
}
